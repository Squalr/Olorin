import { LineEdit } from "std-widgets.slint";

import { Theme } from "../../theme.slint";

import { FocusTouchArea } from "../focus_touch_area.slint";
import { StateLayer } from "../state_layer.slint";

export component TextField {
    in property <string> default_text;
    in property <string> preview_text;
    in property <length> text_padding_top: 4px;
    in property <length> text_padding_bottom: 4px;
    in property <length> text_padding_left: 8px;
    in property <length> text_padding_right: 8px;
    in property <TextHorizontalAlignment> text_horizontal_alignment: left;
    in property <TextVerticalAlignment> text_vertical_alignment: center;
    in property <color> background: Theme.background_primary;
    in property <color> foreground: Theme.foreground;
    in property <color> foreground_preview: Theme.foreground_preview;
    in property <color> border_color: Theme.submenu_border;
    callback text_changed(new_text: string);
    forward_focus: touch_area;
    touch_area := FocusTouchArea {
        width: 100%;
        height: 100%;
        clicked => {
            line_edit.focus();
        }
    }

    state_layer := StateLayer {
        width: 100%;
        height: 100%;
        pressed: touch_area.is_pressed || touch_area.enter_pressed;
        has_focus: touch_area.has_focus;
        has_hover: touch_area.has_hover;
    }

    Rectangle {
        background: root.background;
        border_color: root.border_color;
        border_radius: 2px;
        border_width: 1px;
        content_layer := HorizontalLayout {
            padding_top: root.text_padding_top;
            padding_bottom: root.text_padding_bottom;
            padding_left: root.text_padding_left;
            padding_right: root.text_padding_right;
            line_edit := TextInput {
                text: root.default_text;
                horizontal_alignment: root.text_horizontal_alignment;
                vertical_alignment: root.text_vertical_alignment;
                color: root.foreground;
                single_line: true;
                changed text => {
                    text_changed(self.text);
                }
            }
        }
    }

    // Optional preview text to prompt the user with an input hint.
    preview_layer := HorizontalLayout {
        padding_top: root.text_padding_top;
        padding_bottom: root.text_padding_bottom;
        padding_left: root.text_padding_left;
        padding_right: root.text_padding_right;
        preview_text_display := Text {
            text: line_edit.text == "" ? root.preview_text : "";
            horizontal_alignment: root.text_horizontal_alignment;
            vertical_alignment: root.text_vertical_alignment;
            color: root.foreground_preview;
        }
    }
}
