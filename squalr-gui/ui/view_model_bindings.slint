/// This file contains every binding between the UI (view) and Rust (view_model).
/// The MVVM pattern is really simple. You have:
/// _ A view (.slint files)
/// _ A model (squalr libraries)
/// _ And a view_model (glue that connects the two)
/// The bindings below are how the view <=> view_model connect to one another.

export global WindowViewModelBindings {
    callback close();
    callback maximize();
    callback minimize();
    callback double_clicked();
    callback drag(x: int, y: int);
    callback play_sound(sound_file: string);
}

export struct DockedWindowViewData {
    identifier: string,
    is_docked: bool,
    is_visible: bool,
    position_x: length,
    position_y: length,
    width: length,
    height: length,
    tab_ids: [string],
    active_tab_id: string,
}

export enum RedockTarget { left, right, up, down, center }

export global DockRootViewModelBindings {
    in_out property <length> initial_dock_root_width;
    in_out property <length> initial_dock_root_height;
    in_out property <string> active_dragged_window_id;
    in_out property <bool> is_dragging_window;
    in_out property <DockedWindowViewData> memory_viewer_window;
    in_out property <DockedWindowViewData> output_window;
    in_out property <DockedWindowViewData> pointer_scan_results_window;
    in_out property <DockedWindowViewData> process_selector_window;
    in_out property <DockedWindowViewData> property_viewer_window;
    in_out property <DockedWindowViewData> project_explorer_window;
    in_out property <DockedWindowViewData> scan_results_window;
    in_out property <DockedWindowViewData> snapshot_manager_window;
    in_out property <DockedWindowViewData> settings_window;
    pure callback update_dock_root_width(width: length);
    pure callback update_dock_root_height(height: length);
    pure callback update_dock_root_size(width: length, height: length) -> length;
    pure callback update_active_tab_id(identifier: string);
    pure callback get_tab_text(identifier: string) -> string;
    pure callback is_window_visible(identifier: string) -> bool;
    callback try_redock_window(identifier: string, target_identifier: string, redock_target: RedockTarget);
    callback reset_layout();
    callback show(identifier: string);
    callback hide(identifier: string);
    callback toggle_visibility(identifier: string);
    callback drag_left(identifier: string, delta_x: int, delta_y: int);
    callback drag_right(identifier: string, delta_x: int, delta_y: int);
    callback drag_top(identifier: string, delta_x: int, delta_y: int);
    callback drag_bottom(identifier: string, delta_x: int, delta_y: int);
}

export struct ProcessViewData {
    process_id_str: string,
    process_id: int,
    name: string,
    icon: image,
}

export global ProcessSelectorViewModelBindings {
    callback refresh_windowed_process_list();
    callback refresh_full_process_list();
    callback select_process(process: ProcessViewData);
    in property <[ProcessViewData]> windowed_processes;
    in property <[ProcessViewData]> processes;
    in property <ProcessViewData> selected_process;
}

export global OutputViewModelBindings {
    in_out property <string> output_text;
}

export enum IconView {
    unknown,

    // Data types.
    bool,
    i8,
    i8be,
    u8,
    u8be,
    i16,
    i16be,
    u16,
    u16be,
    i32,
    i32be,
    u32,
    u32be,
    i64,
    i64be,
    u64,
    u64be,
    f32,
    f32be,
    f64,
    f64be,
    string,
    bytes,
    bitfield,

    // Scan constraints.
    changed,
    unchanged,
    increased,
    decreased,
    equal,
    not_equal,
    greater_than,
    greater_than_or_equal,
    less_than,
    less_than_or_equal,
    increased_by_x,
    decreased_by_x,
    multiplied_by_x,
    divided_by_x,
    modulo_by_x,
    shift_left_by_x,
    shift_right_by_x,
    logical_and_by_x,
    logical_or_by_x,
    logical_xor_by_x,

    // Memory alignments
    alignment_1,
    alignment_2,
    alignment_4,
    alignment_8,

    // Floating point tolerances.
    tolerance_10e1,
    tolerance_10e2,
    tolerance_10e3,
    tolerance_10e4,
    tolerance_10e5,
    tolerance_epsilon,

    // Memory read modes.
    skip,
    read_interleaved_with_scan,
    read_before_scan,
}

export enum ScanConstraintTypeView {
    changed,
    unchanged,
    increased,
    decreased,
    equal,
    not_equal,
    greater_than,
    greater_than_or_equal,
    less_than,
    less_than_or_equal,
    increased_by_x,
    decreased_by_x,
    multiplied_by_x,
    divided_by_x,
    modulo_by_x,
    shift_left_by_x,
    shift_right_by_x,
    logical_and_by_x,
    logical_or_by_x,
    logical_xor_by_x,
}

export enum MemoryAlignmentView {
    alignment_1,
    alignment_2,
    alignment_4,
    alignment_8,
}

export enum FloatingPointToleranceView {
    tolerance_10e1,
    tolerance_10e2,
    tolerance_10e3,
    tolerance_10e4,
    tolerance_10e5,
    tolerance_epsilon,
}

export enum MemoryReadModeView {
    skip,
    read_interleaved_with_scan,
    read_before_scan,
}

export global ValueCollectorViewModelBindings {
    callback collect_values();
}

export struct DataTypeRefView {
    data_type_id: string,
    icon_id: string,
}

export struct DataValueView {
    data_type_ref: DataTypeRefView,
    display_value: string,
    is_value_hex: bool,
    fixed_choices: [string],
    // active_display_value_index: int,
    // display_values: [string],
}

export global ScannerViewModelBindings {
    in_out property <DataValueView> active_data_value;
    in_out property <ScanConstraintTypeView> active_scan_type: equal;
    callback reset_scan();
    callback start_scan(data_value: DataValueView, memory_alignment: MemoryAlignmentView, scan_constraint: ScanConstraintTypeView);
    callback set_scan_constraint(scan_constraint: ScanConstraintTypeView);
}

export global MemorySettingsViewModelBindings {
    in_out property <bool> memory_type_none;
    callback memory_type_none_changed(memory_type_none: bool);
    in_out property <bool> memory_type_private;
    callback memory_type_private_changed(memory_type_private: bool);
    in_out property <bool> memory_type_image;
    callback memory_type_image_changed(memory_type_image: bool);
    in_out property <bool> memory_type_mapped;
    callback memory_type_mapped_changed(memory_type_mapped: bool);
    in_out property <bool> required_write;
    callback required_write_changed(required_write: bool);
    in_out property <bool> required_execute;
    callback required_execute_changed(required_execute: bool);
    in_out property <bool> required_copy_on_write;
    callback required_copy_on_write_changed(required_copy_on_write: bool);
    in_out property <bool> excluded_write;
    callback excluded_write_changed(excluded_write: bool);
    in_out property <bool> excluded_execute;
    callback excluded_execute_changed(excluded_execute: bool);
    in_out property <bool> excluded_copy_on_write;
    callback excluded_copy_on_write_changed(excluded_copy_on_write: bool);
    in_out property <string> start_address;
    callback start_address_changed(start_address: string);
    in_out property <string> end_address;
    callback end_address_changed(end_address: string);
    in_out property <bool> only_query_usermode;
    callback only_query_usermode_changed(only_query_usermode: bool);
}

export global ScanSettingsViewModelBindings {
    in_out property <int> results_page_size;
    callback results_page_size_changed(page_size: int);
    in_out property <int> results_read_interval;
    callback results_read_interval_changed(result_read_interval: int);
    in_out property <int> project_read_interval;
    callback project_read_interval_changed(project_read_interval: int);
    in_out property <int> freeze_interval;
    callback freeze_interval_changed(freeze_interval: int);
    in_out property <MemoryAlignmentView> memory_alignment;
    callback memory_alignment_changed(memory_alignment: MemoryAlignmentView);
    in_out property <FloatingPointToleranceView> floating_point_tolerance;
    callback floating_point_tolerance_changed(floating_point_tolerance: FloatingPointToleranceView);
    in_out property <MemoryReadModeView> memory_read_mode;
    callback memory_read_mode_changed(memory_read_mode: MemoryReadModeView);
    in_out property <bool> is_single_threaded_scan;
    callback is_single_threaded_scan_changed(is_single_threaded_scan: bool);
    in_out property <bool> debug_perform_validation_scan;
    callback debug_perform_validation_scan_changed(debug_perform_validation_scan: bool);
}

export struct ProjectViewData {
    name: string,
    path: string,
    icon: image,
}

export struct ProjectItemViewData {
    name: string,
    path: string,
    description: string,
    indentation: int,
    is_checked: bool,
}

export global ProjectExplorerViewModelBindings {
    callback refresh_project_list();
    callback browse_for_project();
    callback open_project(project: ProjectViewData);
    callback close_opened_project();
    callback save_opened_project();
    callback export_project(project: ProjectViewData);
    callback create_new_project();
    callback rename_project(project: ProjectViewData, new_project_name: string);
    in_out property <bool> is_project_open;
    in property <ProjectViewData> opened_project;
    in property <[ProjectViewData]> projects;
    in property <[ProjectItemViewData]> project_items;
}

export struct ScanResultViewData {
    address: string,
    current_value: string,
    previous_value: string,
    is_frozen: bool,
    icon_id: string,
}

export global ScanResultsViewModelBindings {
    in property <[ScanResultViewData]> scan_results;
    in_out property <string> results_memory_size;
    in_out property <string> result_count_string;
    in_out property <string> current_page_index_string: "0";
    in_out property <string> total_page_index_string;
    in_out property <string> result_statistics;
    callback navigate_first_page();
    callback navigate_last_page();
    callback navigate_next_page();
    callback navigate_previous_page();
    callback page_index_text_changed(new_page_index_text: string);
    callback select_scan_results(local_scan_result_indices: [int]);
    callback add_scan_results_to_project(local_scan_result_indices: [int]);
    callback delete_scan_results(local_scan_result_indices: [int]);
    callback set_scan_results_frozen(local_scan_result_indices: [int], is_frozen: bool);
}

export global PointerScanResultsViewModelBindings { }

export struct PropertyEntryViewData {
    name: string,
    data_value: DataValueView,
    is_read_only: bool,
}

export global PropertyViewerViewModelBindings {
    in property <[PropertyEntryViewData]> selected_properties;
    pure callback set_property_value(new_value: string);
}

export global ConversionsViewModelBindings {
    pure callback convert_hex_to_dec(data_value: string) -> string;
    pure callback convert_dec_to_hex(data_value: string) -> string;
    pure callback get_memory_alignment_string(memory_alignment: MemoryAlignmentView) -> string;
    pure callback get_memory_read_mode_string(memory_read_mode: MemoryReadModeView) -> string;
    pure callback get_floating_point_tolerance_string(floating_point_tolerance: FloatingPointToleranceView) -> string;
}

export global ValidationViewModelBindings {
    pure callback validate_data_value(data_value: DataValueView) -> bool;
}
