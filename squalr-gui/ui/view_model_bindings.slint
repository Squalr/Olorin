/// This file contains every binding between the UI (view) and Rust (view-model).
/// The MVVM pattern is really simple. You have:
/// - A view (.slint files)
/// - A model (squalr libraries)
/// - And a view-model (glue that connects the two)
/// The bindings below are how the view <=> view-model connect to one another.

export global WindowViewModelBindings {
    callback close();
    callback maximize();
    callback minimize();
    callback double-clicked();
    callback drag(x: int, y: int);
    callback play-sound(sound_file: string);
}

export struct DockedWindowViewData {
    identifier: string,
    is-docked: bool,
    is-visible: bool,
    position-x: length,
    position-y: length,
    width: length,
    height: length,
    tab-ids: [string],
    active-tab-id: string,
}

export enum RedockTarget { left, right, up, down, center }

export global DockRootViewModelBindings {
    in-out property <length> initial-dock-root-width;
    in-out property <length> initial-dock-root-height;
    in-out property <string> active-dragged-window-id;
    in-out property <bool> is-dragging-window;
    in-out property <DockedWindowViewData> memory-viewer-window;
    in-out property <DockedWindowViewData> output-window;
    in-out property <DockedWindowViewData> pointer-scan-results-window;
    in-out property <DockedWindowViewData> process-selector-window;
    in-out property <DockedWindowViewData> property-viewer-window;
    in-out property <DockedWindowViewData> project-explorer-window;
    in-out property <DockedWindowViewData> scan-results-window;
    in-out property <DockedWindowViewData> snapshot-manager-window;
    in-out property <DockedWindowViewData> settings-window;
    pure callback update-dock-root-width(width: length);
    pure callback update-dock-root-height(height: length);
    pure callback update-dock-root-size(width: length, height: length) -> length;
    pure callback update-active-tab-id(identifier: string);
    pure callback get-tab-text(identifier: string) -> string;
    pure callback is-window-visible(identifier: string) -> bool;
    callback try-redock-window(identifier: string, target-identifier: string, redock-target: RedockTarget);
    callback reset-layout();
    callback show(identifier: string);
    callback hide(identifier: string);
    callback toggle-visibility(identifier: string);
    callback drag-left(identifier: string, delta-x: int, delta-y: int);
    callback drag-right(identifier: string, delta-x: int, delta-y: int);
    callback drag-top(identifier: string, delta-x: int, delta-y: int);
    callback drag-bottom(identifier: string, delta-x: int, delta-y: int);
}

export struct ProcessViewData {
    process-id-str: string,
    process-id: int,
    name: string,
    icon: image,
}

export global ProcessSelectorViewModelBindings {
    callback refresh-windowed-process-list();
    callback refresh-full-process-list();
    callback select-process(process: ProcessViewData);
    in property <[ProcessViewData]> windowed-processes;
    in property <[ProcessViewData]> processes;
    in property <ProcessViewData> selected-process;
}

export global OutputViewModelBindings {
    in-out property <string> output-text;
}

export enum DataTypeView {
    i8,
    u8,
    i16,
    i16be,
    u16,
    u16be,
    i32,
    i32be,
    u32,
    u32be,
    i64,
    i64be,
    u64,
    u64be,
    f32,
    f32be,
    f64,
    f64be,
    aob,
    str,
}

export enum ScanConstraintTypeView {
    changed,
    unchanged,
    increased,
    decreased,
    equal,
    not_equal,
    increased_by,
    decreased_by,
    greater_than,
    greater_than_or_equal_to,
    less_than,
    less_than_or_equal_to,
}

export global ValueCollectorViewModelBindings {
    callback collect_values();
}

export global ManualScanViewModelBindings {
    in-out property <DataTypeView> active_data_type: i32;
    in-out property <ScanConstraintTypeView> active_scan_type: equal;
    callback new_scan(data_type: DataTypeView);
    callback start_scan(scan_constraint: ScanConstraintTypeView, scan_value: string);
    callback set_scan_constraint(scan_constraint: ScanConstraintTypeView);
}

export global MemorySettingsViewModelBindings {
    in-out property <bool> memory_type_none;
    callback memory_type_none_changed(memory_type_none: bool);
    in-out property <bool> memory_type_private;
    callback memory_type_private_changed(memory_type_private: bool);
    in-out property <bool> memory_type_image;
    callback memory_type_image_changed(memory_type_image: bool);
    in-out property <bool> memory_type_mapped;
    callback memory_type_mapped_changed(memory_type_mapped: bool);
    in-out property <bool> required_write;
    callback required_write_changed(required_write: bool);
    in-out property <bool> required_execute;
    callback required_execute_changed(required_execute: bool);
    in-out property <bool> required_copy_on_write;
    callback required_copy_on_write_changed(required_copy_on_write: bool);
    in-out property <bool> excluded_write;
    callback excluded_write_changed(excluded_write: bool);
    in-out property <bool> excluded_execute;
    callback excluded_execute_changed(excluded_execute: bool);
    in-out property <bool> excluded_copy_on_write;
    callback excluded_copy_on_write_changed(excluded_copy_on_write: bool);
    in-out property <string> start_address;
    callback start_address_changed(start_address: string);
    in-out property <string> end_address;
    callback end_address_changed(end_address: string);
    in-out property <bool> only_query_usermode;
    callback only_query_usermode_changed(only_query_usermode: bool);
}

export global ScanSettingsViewModelBindings {
    in-out property <int> results_page_size;
    callback results_page_size_changed(page_size: int);
    in-out property <int> results_read_interval;
    callback results_read_interval_changed(result_read_interval: int);
    in-out property <int> table_read_interval;
    callback table_read_interval_changed(table_read_interval: int);
    in-out property <int> freeze_interval;
    callback freeze_interval_changed(freeze_interval: int);
    // Option<MemoryAlignment>,
    in-out property <int> memory_alignment;
    callback memory_alignment_changed(memory_alignment: int);
    // FloatingPointTolerance,
    in-out property <int> floating_point_tolerance;
    callback floating_point_tolerance_changed(floating_point_tolerance: int);
}

export global ProjectExplorerViewModelBindings { }

export struct ScanResultViewData {
    data_type: DataTypeView,
    address: string,
    current_value: string,
    previous_value: string,
}

export global ScanResultsViewModelBindings {
    in property <[ScanResultViewData]> scan_results;
    in-out property <string> results_memory_size;
    in-out property <string> result_count_string;
    in-out property <string> current_page_index_string: "0";
    in-out property <string> total_page_index_string;
    callback navigate_first_page();
    callback navigate_last_page();
    callback navigate_next_page();
    callback navigate_previous_page();
    callback add_result_range(start_index: int, end_index: int);
    callback page_index_text_changed(new_page_index_text: string);
}

export global PointerScanResultsViewModelBindings { }

export global PropertyViewerViewModelBindings { }
